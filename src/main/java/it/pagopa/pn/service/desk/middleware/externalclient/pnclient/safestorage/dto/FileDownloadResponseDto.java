/*
 * SafeStorage
 * __SafeStorage__: memorizza e __archivia a fini legali file non modificabili__.  Opzionalmente appone firma digitale e marcatura temporale. #### Elenco casi d'uso da soddisfare:   - Upload degli allegati di una notifica, già firmati dalle PA, da mantenere per 120gg. <br/>   - Upload, firma digitale e marcatura temporale degli atti opponibili a terzi.      Conservare 10 anni. <br/>   - Upload Avvisi di Avvenuta Ricezione. <br />   - Upload dei documenti digitali generati da pn-external-channels durante la consegna di messaggi      digitali e copie conformi dei documenti generati durante la consegna di corrispondenza cartacea.     Questi documenti vanno conservati 10 anni <br />   - Download dei file e verifica dei loro checksum. <br />   - In caso di contenzioso bisogna allungare il periodo di retention per file specifici.  #### Requisiti non funzionali:   - I file contenuti nel _SafeStorage_ devono essere \"reccuperabili\" in caso di disastro di      una regione. <br/>   - I file possono essere di dimensioni fino a 1GB, solitamente nell'ordine di 1MB ad eccezione dei     documenti allegati alle notifiche che spesso arrivano ai 50MB. <br/>   - SafeStorage deve garantire la validità della marcatura temporale nel tempo. <br/>  #### Parametri di runtime:   - pst: il tempo (secondi o minuti) in cui un presigned URL rimane valido.   - stayHotTime: quanto tempo un file che era stato archiviato e poi richiamato rimane \"hot\"     prima di essere nuovamente archiviato.  #### Operazioni da invocare per l'archiviazione di un nuovo file.   1. Invocare POST al path '/safe-storage/v1/files' (operation id: createFile ) <br/>   2. Invocare PUT sul presigned URL ottenuto (operation id: uploadFileContent ) <br/>   3. Quando il file è stato caricato e firmato/marcato verrà inserito un messaggio in una coda       SQS specifica per il client che ha richiesto l'operazione.  #### Operazioni da invocare per la lettura di un file esistente.   1. Invocare GET al path '/safe-storage/v1/files/{fileKey}' (operation id: getFile ) <br/>   2. Il file può essere hot (pronto al download) o cold (minuti o ore per il recupero del file)<br/>   3.      1. Se il fle è _hot_ la risposta contiene un url di download da usare entro ```pst``` (tempo          validità presigned url); `pst` è parametro di installazione di SafeStorage.      2. Se il file è _cold_ la risposta contiene un indicazione del tempo necessario a          renderlo _hot_. <br/>         Solo in questo caso, quando il file sarà pronto, verrà inserito un messaggio in una coda          SQS specifica per il client che ha richiesto l'operazione. Tale messaggio conterrà l'URL         di download.   4. L'url di download può essere utilizzato, entro la sua scadenza, per recuperare il contenuto       del file.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.pagopa.pn.service.desk.middleware.externalclient.pnclient.safestorage.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Objects;

/**
 * Informazioni necessarie al download del contenuto di un file
 */
@ApiModel(description = "Informazioni necessarie al download del contenuto di un file")
@JsonPropertyOrder({
  FileDownloadResponseDto.JSON_PROPERTY_KEY,
  FileDownloadResponseDto.JSON_PROPERTY_VERSION_ID,
  FileDownloadResponseDto.JSON_PROPERTY_DOCUMENT_TYPE,
  FileDownloadResponseDto.JSON_PROPERTY_DOCUMENT_STATUS,
  FileDownloadResponseDto.JSON_PROPERTY_CONTENT_TYPE,
  FileDownloadResponseDto.JSON_PROPERTY_CONTENT_LENGTH,
  FileDownloadResponseDto.JSON_PROPERTY_CHECKSUM,
  FileDownloadResponseDto.JSON_PROPERTY_RETENTION_UNTIL,
  FileDownloadResponseDto.JSON_PROPERTY_DOWNLOAD
})
@JsonTypeName("FileDownloadResponse")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-04T17:16:41.599594600+02:00[Europe/Rome]")
@lombok.ToString
public class FileDownloadResponseDto {
  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public static final String JSON_PROPERTY_VERSION_ID = "versionId";
  private String versionId;

  public static final String JSON_PROPERTY_DOCUMENT_TYPE = "documentType";
  private String documentType;

  public static final String JSON_PROPERTY_DOCUMENT_STATUS = "documentStatus";
  private String documentStatus;

  public static final String JSON_PROPERTY_CONTENT_TYPE = "contentType";
  private String contentType;

  public static final String JSON_PROPERTY_CONTENT_LENGTH = "contentLength";
  private BigDecimal contentLength;

  public static final String JSON_PROPERTY_CHECKSUM = "checksum";
  private String checksum;

  public static final String JSON_PROPERTY_RETENTION_UNTIL = "retentionUntil";
  private OffsetDateTime retentionUntil;

  public static final String JSON_PROPERTY_DOWNLOAD = "download";
  private FileDownloadInfoDto download;

  public FileDownloadResponseDto() { 
  }

  public FileDownloadResponseDto key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * la chiave da utilizzare per il recupero del file
   * @return key
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "8F7E/9A3B/1234/AB87", required = true, value = "la chiave da utilizzare per il recupero del file")
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKey(String key) {
    this.key = key;
  }


  public FileDownloadResponseDto versionId(String versionId) {
    
    this.versionId = versionId;
    return this;
  }

   /**
   * __discutibile__. La versione del file su S3
   * @return versionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "3Z9SdhZ50PBeIj617KEMrztNKDMJj8FZ", required = true, value = "__discutibile__. La versione del file su S3")
  @JsonProperty(JSON_PROPERTY_VERSION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getVersionId() {
    return versionId;
  }


  @JsonProperty(JSON_PROPERTY_VERSION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersionId(String versionId) {
    this.versionId = versionId;
  }


  public FileDownloadResponseDto documentType(String documentType) {
    
    this.documentType = documentType;
    return this;
  }

   /**
   * Il tipo del documento
   * @return documentType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "PN_NOTIFICATION_ATTACHMENTS", required = true, value = "Il tipo del documento")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDocumentType() {
    return documentType;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDocumentType(String documentType) {
    this.documentType = documentType;
  }


  public FileDownloadResponseDto documentStatus(String documentStatus) {
    
    this.documentStatus = documentStatus;
    return this;
  }

   /**
   * Lo stato del documento
   * @return documentStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ATTACHED", required = true, value = "Lo stato del documento")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDocumentStatus() {
    return documentStatus;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDocumentStatus(String documentStatus) {
    this.documentStatus = documentStatus;
  }


  public FileDownloadResponseDto contentType(String contentType) {
    
    this.contentType = contentType;
    return this;
  }

   /**
   * Get contentType
   * @return contentType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "application/pdf", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getContentType() {
    return contentType;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public FileDownloadResponseDto contentLength(BigDecimal contentLength) {
    
    this.contentLength = contentLength;
    return this;
  }

   /**
   * dmensione, in byte, del contenuto.
   * @return contentLength
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "54092", required = true, value = "dmensione, in byte, del contenuto.")
  @JsonProperty(JSON_PROPERTY_CONTENT_LENGTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getContentLength() {
    return contentLength;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_LENGTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContentLength(BigDecimal contentLength) {
    this.contentLength = contentLength;
  }


  public FileDownloadResponseDto checksum(String checksum) {
    
    this.checksum = checksum;
    return this;
  }

   /**
   * SHA256 o MD5 del contenuto del file. Il tipo di checksum cambia a seconda del  documentType.
   * @return checksum
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "SHA256 o MD5 del contenuto del file. Il tipo di checksum cambia a seconda del  documentType.")
  @JsonProperty(JSON_PROPERTY_CHECKSUM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getChecksum() {
    return checksum;
  }


  @JsonProperty(JSON_PROPERTY_CHECKSUM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setChecksum(String checksum) {
    this.checksum = checksum;
  }


  public FileDownloadResponseDto retentionUntil(OffsetDateTime retentionUntil) {
    
    this.retentionUntil = retentionUntil;
    return this;
  }

   /**
   * data e ora fino a cui il documento sarà garantito all&#39;interno di _SafeStorage_. &lt;br/&gt; Può essere ritardata nel tempo, mai anticipata. Formattata con timezone secondo l&#39;rfc 3339        
   * @return retentionUntil
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "data e ora fino a cui il documento sarà garantito all'interno di _SafeStorage_. <br/> Può essere ritardata nel tempo, mai anticipata. Formattata con timezone secondo l'rfc 3339        ")
  @JsonProperty(JSON_PROPERTY_RETENTION_UNTIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getRetentionUntil() {
    return retentionUntil;
  }


  @JsonProperty(JSON_PROPERTY_RETENTION_UNTIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRetentionUntil(OffsetDateTime retentionUntil) {
    this.retentionUntil = retentionUntil;
  }


  public FileDownloadResponseDto download(FileDownloadInfoDto download) {
    
    this.download = download;
    return this;
  }

   /**
   * Get download
   * @return download
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOWNLOAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FileDownloadInfoDto getDownload() {
    return download;
  }


  @JsonProperty(JSON_PROPERTY_DOWNLOAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDownload(FileDownloadInfoDto download) {
    this.download = download;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileDownloadResponseDto fileDownloadResponse = (FileDownloadResponseDto) o;
    return Objects.equals(this.key, fileDownloadResponse.key) &&
        Objects.equals(this.versionId, fileDownloadResponse.versionId) &&
        Objects.equals(this.documentType, fileDownloadResponse.documentType) &&
        Objects.equals(this.documentStatus, fileDownloadResponse.documentStatus) &&
        Objects.equals(this.contentType, fileDownloadResponse.contentType) &&
        Objects.equals(this.contentLength, fileDownloadResponse.contentLength) &&
        Objects.equals(this.checksum, fileDownloadResponse.checksum) &&
        Objects.equals(this.retentionUntil, fileDownloadResponse.retentionUntil) &&
        Objects.equals(this.download, fileDownloadResponse.download);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, versionId, documentType, documentStatus, contentType, contentLength, checksum, retentionUntil, download);
  }

}

